diff --git a/Makefile b/Makefile
index 09d790c..699fb39 100644
--- a/Makefile
+++ b/Makefile
@@ -181,6 +181,7 @@ UPROGS=\
 	_usertests\
 	_wc\
 	_zombie\
+	_lseek\
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
diff --git a/fcntl.h b/fcntl.h
index d565483..d5b0d59 100644
--- a/fcntl.h
+++ b/fcntl.h
@@ -2,3 +2,6 @@
 #define O_WRONLY  0x001
 #define O_RDWR    0x002
 #define O_CREATE  0x200
+#define SEEK_SET   0
+#define SEEK_CUR   1
+#define SEEK_END   2	
diff --git a/lseek.c b/lseek.c
new file mode 100644
index 0000000..e20c460
--- /dev/null
+++ b/lseek.c
@@ -0,0 +1,37 @@
+#include "types.h"
+#include "user.h"
+#include "fcntl.h"
+#include "syscall.h"
+#include "traps.h"
+#include "memlayout.h"
+#include "stat.h"
+#include "fs.h"
+
+//reading from README file to test lseek
+int main(int argc, char* argv[]){
+    int fd;
+    char data[256];
+    fd = open("sanskar.txt", O_RDONLY);
+    if(fd == -1){
+        printf(1,"Unable to open file.\n");
+    }
+    lseek(fd, 5, SEEK_SET);
+    read(fd, data, 5);
+    printf(1, "Output of SEEK_SET: %s\n", data);
+    
+    
+    lseek(fd, 5, SEEK_CUR);
+    read(fd, data, 5);
+    printf(1, "Output of SEEK_CUR: %s\n", data);
+    
+    
+    
+    lseek(fd, -5, SEEK_END);
+    int n= read(fd, data, 5);
+    data[n]='\0';
+    printf(1, "Output of SEEk_END: %s\n", data);
+    
+    
+    close(fd);
+    exit();
+}
diff --git a/syscall.c b/syscall.c
index ee85261..bb96e30 100644
--- a/syscall.c
+++ b/syscall.c
@@ -103,6 +103,7 @@ extern int sys_unlink(void);
 extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
+extern int sys_lseek(void);
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -126,6 +127,7 @@ static int (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_lseek]   sys_lseek,
 };
 
 void
diff --git a/syscall.h b/syscall.h
index bc5f356..93fbf00 100644
--- a/syscall.h
+++ b/syscall.h
@@ -20,3 +20,4 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_lseek  22
diff --git a/sysfile.c b/sysfile.c
index bfe61b7..8107df7 100644
--- a/sysfile.c
+++ b/sysfile.c
@@ -15,7 +15,7 @@
 #include "sleeplock.h"
 #include "file.h"
 #include "fcntl.h"
-
+#include "stddef.h"
 // Fetch the nth word-sized system call argument as a file descriptor
 // and return both the descriptor and the corresponding struct file.
 static int
@@ -442,3 +442,37 @@ sys_pipe(void)
   fd[1] = fd1;
   return 0;
 }
+
+int
+sys_lseek(void){
+  int  offset=0, base=0;
+  struct file *f=NULL;
+
+   if(argfd(0, 0, &f) < 0){
+    return -1;
+  }
+  if(argint(1, &offset) < 0){
+    return -1;
+  }
+  if(argint(2, &base) < 0){
+    return -1;
+  }
+  
+  if(base == 0){
+ 
+    f->off = offset;
+  }
+  else if(base == 1){
+ 
+    f->off = f->off + offset;
+  }
+  else if(base == 2){
+  
+    f->off = f->ip->size-1 + offset;
+  }
+  else {
+    return -1;
+  }
+// f->off = whence;
+  return 0;
+}
diff --git a/user.h b/user.h
index 4f99c52..d358fbd 100644
--- a/user.h
+++ b/user.h
@@ -23,6 +23,7 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int lseek(int, int, int);
 
 // ulib.c
 int stat(const char*, struct stat*);
@@ -37,3 +38,4 @@ void* memset(void*, int, uint);
 void* malloc(uint);
 void free(void*);
 int atoi(const char*);
+
diff --git a/usys.S b/usys.S
index 8bfd8a1..6244300 100644
--- a/usys.S
+++ b/usys.S
@@ -29,3 +29,4 @@ SYSCALL(getpid)
 SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
+SYSCALL(lseek)
